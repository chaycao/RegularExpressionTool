import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by chaycao on 2017/6/23.
 */
public class RegularExpressionTool {
    private JTextField expression;
    private JTextArea textContent;
    private JTextArea result;
    private JPanel main;

    public RegularExpressionTool() {
        textContent.getDocument().addDocumentListener(new ContentListener(expression, textContent, result));
        expression.getDocument().addDocumentListener(new ContentListener(expression, textContent, result));
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("RegularExpressionTool-chaycao");
        frame.setContentPane(new RegularExpressionTool().main);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setIconImage(new ImageIcon("E:\\IdeaProjects\\RegularExpressionTool\\src\\main\\resources\\icon.jpg").getImage());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        main = new JPanel();
        main.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
        expression = new JTextField();
        expression.setFont(new Font(expression.getFont().getName(), expression.getFont().getStyle(), 22));
        expression.setText("");
        main.add(expression, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(160, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("正则表达式：");
        main.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("文本内容：");
        main.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("匹配内容：");
        main.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        main.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(380, 160), null, 0, false));
        textContent = new JTextArea();
        textContent.setFont(new Font(textContent.getFont().getName(), textContent.getFont().getStyle(), 16));
        textContent.setLineWrap(true);
        textContent.setWrapStyleWord(true);
        scrollPane1.setViewportView(textContent);
        final JScrollPane scrollPane2 = new JScrollPane();
        main.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(380, 160), null, 0, false));
        result = new JTextArea();
        result.setFont(new Font(result.getFont().getName(), result.getFont().getStyle(), 16));
        result.setLineWrap(true);
        result.setWrapStyleWord(true);
        scrollPane2.setViewportView(result);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

    public class ContentListener implements DocumentListener {
        private JTextField expression;
        private JTextArea textContent;
        private JTextArea result;

        public ContentListener(JTextField expression, JTextArea textContent, JTextArea result) {
            this.expression = expression;
            this.textContent = textContent;
            this.result = result;
        }

        public void insertUpdate(DocumentEvent e) {
            try {
                Pattern pattern = Pattern.compile(expression.getText());
                Matcher matcher = pattern.matcher(textContent.getText());
                if (matcher.find()) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(matcher.group());
                    while (matcher.find())
                        sb.append("\n" + matcher.group());
                    result.setText(sb.toString());

                } else {
                    result.setText("未匹配到！");
                }
            } catch (Exception exception) {

            }

        }

        public void removeUpdate(DocumentEvent e) {
            try {
                Pattern pattern = Pattern.compile(expression.getText());
                Matcher matcher = pattern.matcher(textContent.getText());
                if (matcher.find()) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(matcher.group());
                    while (matcher.find())
                        sb.append("\n" + matcher.group());
                    result.setText(sb.toString());

                } else {
                    result.setText("未匹配到！");
                }
            } catch (Exception exception) {

            }


        }

        public void changedUpdate(DocumentEvent e) {
            System.out.println("changed");
        }
    }
}
